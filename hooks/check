#!/bin/bash

cc_ok=yes
# Cloud Config checks
if [[ -n "$GENESIS_CLOUD_CONFIG" ]] ; then
  if ! want_feature proto; then
    for t in api bbs cell diego doppler errand loggregator nats router syslogger uaa; do
      cloud_config_needs vm_type $(lookup params.${t}_vm_type $t)
    done
    if want_feature local-blobstore || want_feature blobstore-webdav; then
      cloud_config_needs vm_type   $(lookup params.blobstore_vm_type   blobstore)
      cloud_config_needs disk_type $(lookup params.blobstore_disk_pool blobstore)
    fi
    if want_feature local-db || want_feature db-internal-postgres || want_feature local-ha-db; then
      cloud_config_needs vm_type   $(lookup params.postgres_vm_type   postgres)
      cloud_config_needs disk_type $(lookup params.postgres_disk_pool postgres)
      cloud_config_needs network   $(lookup params.cf_db_network      cf-db)
    fi

    cloud_config_needs network $(lookup params.cf_internal_network cf-core)
    cloud_config_needs network $(lookup params.cf_edge_network     cf-edge)
    cloud_config_needs network $(lookup params.cf_runtime_network  cf-runtime)

    if want_feature autoscaler; then
      cloud_config_needs network   $(lookup params.autoscaler_network cf-autoscaler)
      for t in api broker scheduler collector scaler engine operator; do
        cloud_config_needs vm_type $(lookup params.autoscaler_${t}_vm_type as-${t})
      done
    fi

  fi
  # Check if there were any errors reported from the above checks.
  if check_cloud_config ; then
    describe "  cloud config [#G{OK}]"
  else
    describe "  cloud config [#R{FAILED}]"
    cc_ok=no
  fi
fi


# Runtime config checks
runtime_ok=yes

# Check for BOSH DNS
if [[ $(rcq '.addons[] | select(.name == "bosh-dns")') == "" ]]; then
  runtime_ok=no
  describe "  #R{Errors were found} in your runtime-config:"
  describe "    - #R{BOSH DNS is not in the runtime-config, which is required. Refer to}"
  describe "      #R{'genesis man $GENESIS_ENVIRONMENT' for more info.}"
  describe ""
fi

# Check if there were any errors reported from runtime config checks
if [[ "$runtime_ok" == "yes" ]]; then
  describe "  runtime config [#G{OK}]"
else
  describe "  runtime config [#R{FAILED}]"
fi

env_ok=yes
vault="secret/$GENESIS_VAULT_PREFIX"
secret_exists() {
  safe --quiet exists "$vault/$1" >/dev/null 2>&1
}
relocate_secret() {
  src="$1"; dst="$2";
  if ! secret_exists "$dst" ; then
    if secret_exists "$src" ; then
      safe --quiet mv "$vault/$src" "$vault/$dst" >/dev/null 2>&1
    else
      return 1
    fi
  elif secret_exists "$src" ; then
    # Remove outdated location
    safe --quiet rm "$vault/$src" >/dev/null 2>&1:
  fi
  return 0
}

# Environment Parameter checks

if [[ "$(lookup params | jq -r '.apps_domain | type')" == 'array' ]] ; then
  describe >&2 \
    "  %R{[ERROR]} Expect params.apps_domain to be a string, but found an array.  Use" \
    "          params.apps_domains to specify multiple app domains"
  env_ok=no
fi

# Fix erroneous location of certs for dns-service-discovery introduced in 1.8.0
if want_feature 'dns-service-discovery' ; then
  relocate_secret "cf_app_sd/ca"     "cf_app_sd/certs/ca"
  relocate_secret "cf_app_sd/client" "cf_app_sd/certs/client"
  relocate_secret "cf_app_sd/server" "cf_app_sd/certs/server"
fi

if [[ "$env_ok" == "yes" ]]; then
  describe "  environment files [#G{OK}]"
else
  describe "  environment files [#R{FAILED}]"
fi

if [[ "$env_ok" == "no" || "$cc_ok" == "no" || "$runtime_ok" == no ]] ; then
  exit 1
fi
